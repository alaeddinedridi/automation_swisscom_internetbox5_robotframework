----- Robot framework -----

python version: Python 3.11.11


----- Robotframework libraries -----

pip install robotframework
pip install robotframework-seleniumlibrary
pip install robotframework-browser
pip install robotframework-pabot
pip install TestLink-API-Python-client




----- Robotframework commands -----

rfbrowser init


if it says command not found then run this: python -m Browser.entry init

run test, eg: robot --outputdir results ./tests/login_tests.robot

run 3 parallel tests: pabot --outputdir results --processes 3 ./tests/

run parallel tests that are with tag sanity: pabot --outputdir results --processes 2 --include sanity ./tests/

only run tests with tag sanity: robot --outputdir results --include sanity ./tests/




----- Docker - selenium hub -----


Start the hub:

docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.21.0


Start the Chrome node:

docker run -d --name chrome-node --network container:selenium-hub \
  -e SE_EVENT_BUS_HOST=localhost \
  -e SE_EVENT_BUS_PUBLISH_PORT=4442 \
  -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \
  selenium/node-chrome:4.21.0
  
  
http://localhost:4444/ui



remove containers:
docker rm -f selenium-hub chrome-node


list containers:
docker ps




----- Setup testlink -----

Precondition: make sure you have xampp installed and running

download it from here: https://sourceforge.net/projects/xampp/files/XAMPP%20Linux/7.4.33/
install it : sudo ./xampp-linux-x64-7.4.33-0-installer.run
run it : sudo /opt/lampp/./manager-linux-x64.run

check php version: /opt/lampp/bin/php -v

i'm using: PHP 7.4.33

check mysql version: /opt/lampp/bin/mysql --version

i'm using: 10.4.27-MariaDB


1) go to https://testlink.org/ and download testlink stable version 1.9.20


2) copy testlink folder to put it under /opt/lampp/htdocs

3) give permissions to the testlink folder: 
sudo chown -R daemon:daemon /opt/lampp/htdocs/testlink
sudo chmod -R 777 /opt/lampp/htdocs/testlink

4) to start installation, go to http://localhost/testlink

hostname: localhost:theApachePort
database name: testlink
Database admin login: root
Database admin password: 

TestLink DB login: testlink_user
TestLink DB password: test1234

login name: admin
password : admin

5) after the installation is successfully done, and you can check that by making sure testlink database was created and tables inside of it were created then you can login to testlink: http://localhost/testlink with using: admin/admin

6) Create test plan, create test suites and test cases, create build name, then add the test cases to the test plan

7) in test scripts, i set the test case name from testlink as tag in the corresponding test case

8) get api key from testlink settings and put it in the testlink utils script

9) also put this url in the testlink utils script: http://localhost:8090/testlink/lib/api/xmlrpc/v1/xmlrpc.php
but make sure in your case you use this part to access to testlink : http://localhost:8090/testlink
to make sure that url works, try to access it using a browser

10) run your tests

11) then run this script to inject results into testlink:

python utils/exportToTestlink.py --project "Swisscom_InternetBox5" --plan "Sanity" --build "Sanity-test-build" 

12) Now if we have failed tests, then we have to link bug tickets to them, so we need a defect management system, in our case (Jira)
So we have to setup jira

13) Go to testlink: http://localhost:8090/testlink/index.php
Click on issue tracker management, then create an issue tracker
Type: jira (interface: rest)
Configuration:

<issuetracker>
  <username>aladdindridi</username>
  <password>test1234</password>
  <uribase>http://localhost:8080/</uribase>
  <uriapi>http://localhost:8080/rest/api/latest/</uriapi>
  <uriview>http://localhost:8080/browse/</uriview>

  <!-- 1 enables dropdowns for types, priorities, versions, etc. -->
  <userinteraction>1</userinteraction>

  <!-- Creating issues in this Jira project -->
  <projectkey>HSC</projectkey>

  <!-- Use issue type name like 'Bug' or the numeric ID -->
  <issuetype>Bug</issuetype>

  <!-- Priority (e.g., High, Medium, Low or ID like 3) -->
  <issuepriority>Medium</issuepriority>

</issuetracker>

Then test connection to check if it's connected to jira, btw our jira url is : http://localhost:8080/
note: username and password are the credentials i use to connect to my jira account

14) go to http://localhost:8090/testlink/index.php
Click on Test Project Management, then click on the project, choose your issue tracker that you just created and activate it!! then save

15) Go to test execution then to the failed test, you should see an icon to link an existing issue / create issue

16) if you click on link existing issue and you get an error then run these commands:

cd /opt/lampp/htdocs/testlink/gui
sudo chown -R daemon:daemon templates_c
sudo chmod -R 755 templates_c

17) try again, it should work, put the ID of the bug ticket and click save



----- Setup jira -----

1) Install java jdk17, check which version you have with these commands:
java -version
sudo update-alternatives --config java

2) Create jira user: sudo adduser --system --home /opt/jira --shell /bin/bash jira

3) install postgresSQL:
sudo apt install postgresql postgresql-contrib -y
sudo -u postgres createuser -P jirauser
sudo -u postgres createdb -O jirauser jiradb

4) sudo -u postgres psql
ALTER ROLE jirauser WITH LOGIN;
\q

5) Download and extract jira: 
cd /opt
sudo wget https://product-downloads.atlassian.com/software/jira/downloads/atlassian-jira-software-9.15.0.tar.gz
sudo tar -zxvf atlassian-jira-software-9.15.0.tar.gz
sudo mv atlassian-jira-software-9.15.0-standalone /opt/jira/jira-software

6) set environment variables: sudo gedit /etc/environment
JAVA_HOME="/usr/lib/jvm/jdk-17-oracle-x64"
JIRA_HOME="/opt/jira/home"
and reload the system path using: ". /etc/environment" or "source /etc/environment"
to check if it was applied: echo $JAVA_HOME

7) Create the home directory for jira
sudo groupadd jira
sudo usermod -g jira jira

sudo mkdir /opt/jira/home
sudo chown -R jira:jira /opt/jira/home

8) Install Jira: 
cd /opt/jira/jira-software/bin
sudo ./start-jira.sh

and visit: http://localhost:8080

9) database info to put while configuring jira:
choose to configure jira by yourself without internet connection then select "my own database"
Database type: PostgresSQL
Hostname: localhost
DB name: jiradb
Username: jirauser
Password: your set password (in my case: test1234)

and check if postgresSQL is working : sudo systemctl status postgresql

Project: HGW Swisscom
Key: HSC

10) stop jira
sudo ./stop-jira.sh

11) in case you want to reset jira and reconfigure it:
sudo rm /opt/jira-home/dbconfig.xml
sudo rm -rf /opt/jira-home/plugins
sudo rm -rf /opt/jira-home/caches
sudo rm -rf /opt/jira-home/indexes

and visit: http://localhost:8080






----- Setup jenkins -----

wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt update
sudo apt install jenkins

or download the .war file and install it like this: java -jar jenkins.war


sudo systemctl start jenkins
sudo systemctl status jenkins

access to jenkins: http://localhost:8080/

the password is here: sudo cat /var/lib/jenkins/secrets/initialAdminPassword

my current account: admin - admin1234

if you want to change jenkins port:
sudo gedit /etc/default/jenkins
put the new port here: HTTP_PORT=9070


// Configure JAVA_HOME on Ubuntu

* locate java installation: update-alternatives --config java

* Add JAVA_HOME to the environment:

sudo nano /etc/environment
and put the location of java : JAVA_HOME="/usr/lib/jvm/jdk-17-oracle-x64/bin/java"

* reload the environment configuration file: source /etc/environment

* check if the env variable is set : echo $JAVA_HOME


// jenkins plugins

Maven Integration plugin: to be able to build a maven project
robot framework
Cucumber reports : generate a cucumber html report
